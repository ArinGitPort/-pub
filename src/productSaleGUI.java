
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author allen
 */
public class productSaleGUI extends javax.swing.JFrame {

    private List<Map<String, Object>> salesData = new ArrayList<>();
    private List<Map<String, Object>> cartData = new ArrayList<>();

    private double totalSales = 0.0;

    /**
     * Creates new form productSaleGUI
     */
    public productSaleGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CartTable = new javax.swing.JTable();
        RemoveProductFromCartButton = new javax.swing.JButton();
        CartLabel = new javax.swing.JLabel();
        TotalLabel = new javax.swing.JLabel();
        ConfirmOrderButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        AvailableProductLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        AddStocksToProductTableButton = new javax.swing.JButton();
        GenerateReportButton = new javax.swing.JButton();
        AddNewProductToProductTableButton = new javax.swing.JButton();
        RemoveProductInProductTable = new javax.swing.JButton();
        SubtractStocksFromProductTable = new javax.swing.JButton();
        AvailableProductLabel1 = new javax.swing.JLabel();
        AddToCartButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setForeground(new java.awt.Color(153, 153, 153));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        CartTable.setAutoCreateRowSorter(true);
        CartTable.setBackground(new java.awt.Color(204, 204, 204));
        CartTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        CartTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CartTable.setForeground(new java.awt.Color(0, 0, 0));
        CartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CartTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(CartTable);
        if (CartTable.getColumnModel().getColumnCount() > 0) {
            CartTable.getColumnModel().getColumn(0).setResizable(false);
            CartTable.getColumnModel().getColumn(1).setResizable(false);
            CartTable.getColumnModel().getColumn(2).setResizable(false);
        }

        RemoveProductFromCartButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        RemoveProductFromCartButton.setText("Remove From Cart");
        RemoveProductFromCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveProductFromCartButtonActionPerformed(evt);
            }
        });

        CartLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CartLabel.setForeground(new java.awt.Color(204, 204, 204));
        CartLabel.setText("CART");

        TotalLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        TotalLabel.setForeground(new java.awt.Color(204, 204, 204));
        TotalLabel.setText("Total: Php ");

        ConfirmOrderButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ConfirmOrderButton.setText("Confirm Order");
        ConfirmOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(CartLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(RemoveProductFromCartButton)
                        .addGap(100, 100, 100))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfirmOrderButton)
                    .addComponent(TotalLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(CartLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(RemoveProductFromCartButton)
                .addGap(56, 56, 56)
                .addComponent(TotalLabel)
                .addGap(63, 63, 63)
                .addComponent(ConfirmOrderButton)
                .addGap(16, 16, 16))
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        AvailableProductLabel.setBackground(new java.awt.Color(204, 204, 204));
        AvailableProductLabel.setFont(new java.awt.Font("Gadugi", 1, 24)); // NOI18N
        AvailableProductLabel.setForeground(new java.awt.Color(204, 204, 204));
        AvailableProductLabel.setText("AVAILABLE PRODUCTS");
        AvailableProductLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ProductTable.setAutoCreateRowSorter(true);
        ProductTable.setBackground(new java.awt.Color(204, 204, 204));
        ProductTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ProductTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ProductTable.setForeground(new java.awt.Color(0, 0, 0));
        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"2024-001", "Apple", "Food",  new Double(20.0),  new Integer(10)},
                {"2024-002", "Burger", "Food",  new Double(30.0),  new Integer(10)},
                {"2024-003", "Water", "Drink",  new Double(20.0),  new Integer(10)},
                {"2024-004", "Coke", "Drink",  new Double(30.0),  new Integer(10)},
                {"2024-005", "Towel", "Misc.",  new Double(50.0),  new Integer(10)}
            },
            new String [] {
                "ID", "Name", "Category", "Price PHP", "Stocks"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(ProductTable);
        if (ProductTable.getColumnModel().getColumnCount() > 0) {
            ProductTable.getColumnModel().getColumn(0).setResizable(false);
            ProductTable.getColumnModel().getColumn(1).setResizable(false);
            ProductTable.getColumnModel().getColumn(2).setResizable(false);
            ProductTable.getColumnModel().getColumn(3).setResizable(false);
            ProductTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        jPanel3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        AddStocksToProductTableButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AddStocksToProductTableButton.setText("Add Stocks");
        AddStocksToProductTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStocksToProductTableButtonActionPerformed(evt);
            }
        });

        GenerateReportButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        GenerateReportButton.setText("Generate Report");
        GenerateReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateReportButtonActionPerformed(evt);
            }
        });

        AddNewProductToProductTableButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AddNewProductToProductTableButton.setText("Add Product");
        AddNewProductToProductTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewProductToProductTableButtonActionPerformed(evt);
            }
        });

        RemoveProductInProductTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        RemoveProductInProductTable.setText("Remove Product");
        RemoveProductInProductTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveProductInProductTableActionPerformed(evt);
            }
        });

        SubtractStocksFromProductTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SubtractStocksFromProductTable.setText("Subtract Stocks");
        SubtractStocksFromProductTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubtractStocksFromProductTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AddNewProductToProductTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addComponent(AddStocksToProductTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RemoveProductInProductTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SubtractStocksFromProductTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(GenerateReportButton)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveProductInProductTable)
                    .addComponent(AddNewProductToProductTableButton))
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddStocksToProductTableButton)
                    .addComponent(SubtractStocksFromProductTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GenerateReportButton)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        AvailableProductLabel1.setBackground(new java.awt.Color(255, 255, 255));
        AvailableProductLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        AvailableProductLabel1.setForeground(new java.awt.Color(204, 204, 204));
        AvailableProductLabel1.setText("ADMIN ONLY OPTION");
        AvailableProductLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        AddToCartButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AddToCartButton.setText("Add To Cart");
        AddToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToCartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(AvailableProductLabel1)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(AddToCartButton)
                        .addGap(147, 147, 147))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(AvailableProductLabel)
                        .addGap(76, 76, 76))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(AvailableProductLabel)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AddToCartButton)
                .addGap(28, 28, 28)
                .addComponent(AvailableProductLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cash-flow (1).png"))); // NOI18N
        jLabel1.setText("POS SYSTEM");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, java.awt.Color.darkGray));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(243, 243, 243))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RemoveProductInProductTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveProductInProductTableActionPerformed
        // Prompt for login
        JTextField usernameField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JCheckBox showPasswordCheckbox = new JCheckBox("Show Password");

        // Add an action listener to the checkbox to toggle password visibility
        showPasswordCheckbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                passwordField.setEchoChar(showPasswordCheckbox.isSelected() ? '\u0000' : '*');
            }
        });

        Object[] message = {
            "Enter username:", usernameField,
            "Enter password:", passwordField,
            showPasswordCheckbox
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Login", JOptionPane.OK_CANCEL_OPTION);
        if (option != JOptionPane.OK_OPTION) {
            return; // Cancel button clicked
        }
        String username = usernameField.getText();
        char[] passwordChars = passwordField.getPassword();
        String password = new String(passwordChars);

        // Check if user is authorized (dummy check, replace with actual authorization logic)
        if ("admin".equals(username) && "admin".equals(password)) {
            // Proceed with removing a product
            DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
            int selectedRowIndex = ProductTable.getSelectedRow();
            if (selectedRowIndex != -1) {
                int confirmOption = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to remove this product?", "Confirm Removal",
                        JOptionPane.YES_NO_OPTION);
                if (confirmOption == JOptionPane.YES_OPTION) {
                    model.removeRow(selectedRowIndex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a product to remove.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password. You need admin rights to remove a product.");
        }    }//GEN-LAST:event_RemoveProductInProductTableActionPerformed

    private void SubtractStocksFromProductTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubtractStocksFromProductTableActionPerformed
        // Prompt for login
        JTextField usernameField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JCheckBox showPasswordCheckbox = new JCheckBox("Show Password");

        // Add an action listener to the checkbox to toggle password visibility
        showPasswordCheckbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                passwordField.setEchoChar(showPasswordCheckbox.isSelected() ? '\u0000' : '*');
            }
        });

        Object[] message = {
            "Enter username:", usernameField,
            "Enter password:", passwordField,
            showPasswordCheckbox
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Login", JOptionPane.OK_CANCEL_OPTION);
        if (option != JOptionPane.OK_OPTION) {
            return; // Cancel button clicked
        }
        String username = usernameField.getText();
        char[] passwordChars = passwordField.getPassword();
        String password = new String(passwordChars);

        // Check if user is authorized (dummy check, replace with actual authorization logic)
        if ("admin".equals(username) && "admin".equals(password)) {
            // Subtract stocks functionality
            // For example, update the ProductTable with subtracted stock values
            DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
            int selectedRowIndex = ProductTable.getSelectedRow();
            if (selectedRowIndex != -1) {
                String stocks = JOptionPane.showInputDialog(this, "Enter the number of stocks to subtract:");
                if (stocks == null) {
                    return; // Cancel button clicked
                }
                int subtractedStocks = Integer.parseInt(stocks);
                int currentStocks = Integer.parseInt(model.getValueAt(selectedRowIndex, 4).toString());
                int remainingStocks = currentStocks - subtractedStocks;
                if (remainingStocks >= 0) {
                    int confirmOption = JOptionPane.showConfirmDialog(this,
                            "Are you sure you want to subtract " + subtractedStocks + " stocks?", "Confirm Subtraction",
                            JOptionPane.YES_NO_OPTION);
                    if (confirmOption == JOptionPane.YES_OPTION) {
                        model.setValueAt(remainingStocks, selectedRowIndex, 4);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Subtraction cannot result in negative stocks.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a product to subtract stocks.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password. You need admin rights to subtract stocks.");
        }
     }//GEN-LAST:event_SubtractStocksFromProductTableActionPerformed

    private void updateTotalSales() {
        totalSales = 0.0;
        DefaultTableModel cartModel = (DefaultTableModel) CartTable.getModel();
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            double productPrice = Double.parseDouble(cartModel.getValueAt(i, 1).toString());
            int quantity = Integer.parseInt(cartModel.getValueAt(i, 2).toString());
            totalSales += (productPrice * quantity);
        }
        TotalLabel.setText("Total Sales: Php " + totalSales);
    }

    private void AddToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_AddToCartButtonActionPerformed
        // Get the selected row index in the ProductTable
        int selectedRowIndex = ProductTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex != -1) {
            // Get the selected product details from the ProductTable
            String productName = ProductTable.getValueAt(selectedRowIndex, 1).toString();
            double productPrice = Double.parseDouble(ProductTable.getValueAt(selectedRowIndex, 3).toString());
            int availableStocks = Integer.parseInt(ProductTable.getValueAt(selectedRowIndex, 4).toString());

            // Check if the available stocks are greater than zero
            if (availableStocks > 0) {
                // Show an input dialog to get the quantity from the user
                String quantityString = JOptionPane.showInputDialog(this, "Enter quantity for " + productName + ":");

                // Check if the user entered a quantity
                if (quantityString != null && !quantityString.isEmpty()) {
                    try {
                        int quantity = Integer.parseInt(quantityString);
                        if (quantity > 0 && quantity <= availableStocks) {
                            // Update the available stock for the selected product
                            int newAvailableStocks = availableStocks - quantity;
                            ProductTable.setValueAt(newAvailableStocks, selectedRowIndex, 4);

                            // Check if the selected product is already in the cart
                            boolean productExistsInCart = false;
                            DefaultTableModel cartModel = (DefaultTableModel) CartTable.getModel();
                            for (int i = 0; i < cartModel.getRowCount(); i++) {
                                if (productName.equals(cartModel.getValueAt(i, 0).toString())) {
                                    // Update the count of the existing product in the cart
                                    int currentCount = Integer.parseInt(cartModel.getValueAt(i, 2).toString());
                                    cartModel.setValueAt(currentCount + quantity, i, 2);
                                    productExistsInCart = true;
                                    break;
                                }
                            }

                            // If the product is not already in the cart, add it as a new row
                            if (!productExistsInCart) {
                                cartModel.addRow(new Object[]{productName, productPrice, quantity});
                            }

                            // Update the total price
                            updateTotalPrice();

                            // Update the total sales and label
                            updateTotalSales();
                        } else if (quantity <= 0) {
                            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.");
                        } else {
                            JOptionPane.showMessageDialog(this, "Quantity exceeds available stocks.");
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid number.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No available stocks for " + productName + ".");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product to add to the cart.");
        }
    }// GEN-LAST:event_AddToCartButtonActionPerformed

    private void RemoveProductFromCartButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RemoveProductFromCartButtonActionPerformed
        // Get the selected row index
        int selectedRowIndex = CartTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex != -1) {
            // Get the name of the product and its quantity from the selected row
            String productName = (String) CartTable.getValueAt(selectedRowIndex, 0);
            int quantityToRemove = (int) CartTable.getValueAt(selectedRowIndex, 2);

            // Prompt the user for confirmation
            int option = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to remove " + productName + " from the cart?", "Confirm Removal",
                    JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                // Remove the selected row from the CartTable
                DefaultTableModel model = (DefaultTableModel) CartTable.getModel();
                model.removeRow(selectedRowIndex);

                // Update the stock in the ProductTable
                DefaultTableModel productTableModel = (DefaultTableModel) ProductTable.getModel();
                for (int i = 0; i < productTableModel.getRowCount(); i++) {
                    if (productName.equals(productTableModel.getValueAt(i, 1))) {
                        int currentStock = (int) productTableModel.getValueAt(i, 4);
                        productTableModel.setValueAt(currentStock + quantityToRemove, i, 4);
                        break;
                    }
                }

                // Optionally, update the total price displayed
                updateTotalPrice();
            }
        } else {
            // If no row is selected, display a message to the user
            JOptionPane.showMessageDialog(this, "Please select a product to remove.", "No Product Selected",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void updateTotalPrice() {
        // Calculate the total price by summing up the prices of all products in the
        // cart
        double totalPrice = 0;
        for (int i = 0; i < CartTable.getRowCount(); i++) {
            totalPrice += (double) CartTable.getValueAt(i, 1) * (int) CartTable.getValueAt(i, 2);
        }

        // Update the total price label or any other component displaying the total
        // price
        TotalLabel.setText("Total: Php " + totalPrice);
    }// GEN-LAST:event_RemoveProductFromCartButtonActionPerformed

    private double totalSalesReport = 0.0;

    // ActionListener for the Generate Report Button
    private void GenerateReportButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Generate sales report
        StringBuilder salesReport = generateSalesReport();

        // Generate inventory report
        StringBuilder inventoryReport = new StringBuilder();
        inventoryReport.append("Inventory Report\n\n");
        DefaultTableModel productModel = (DefaultTableModel) ProductTable.getModel();
        for (int i = 0; i < productModel.getRowCount(); i++) {
            String productName = productModel.getValueAt(i, 1).toString();
            double productPrice = Double.parseDouble(productModel.getValueAt(i, 3).toString());
            int availableStocks = Integer.parseInt(productModel.getValueAt(i, 4).toString());
            inventoryReport.append(productName).append("\n");
            inventoryReport.append("Price: Php ").append(productPrice).append("\n");
            inventoryReport.append("Available Stocks: ").append(availableStocks).append("\n\n");
        }

        // Display reports
        JTextArea reportTextArea = new JTextArea();
        reportTextArea.setText(salesReport.toString() + "\n\n" + inventoryReport.toString());
        reportTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(reportTextArea);
        scrollPane.setPreferredSize(new Dimension(600, 400));
        JOptionPane.showMessageDialog(this, scrollPane, "Report", JOptionPane.PLAIN_MESSAGE);
    }

    // Method to generate the sales report
    private StringBuilder generateSalesReport() {
        StringBuilder salesReport = new StringBuilder();
        salesReport.append("Sales Report\n\n");
        double totalSalesCopy = 0.0; // Initialize totalSalesCopy to 0
        for (Map<String, Object> item : cartData) {
            String productName = (String) item.get("productName");
            double productPrice = (double) item.get("productPrice");
            int quantity = (int) item.get("quantity");
            double subtotal = productPrice * quantity;
            totalSalesCopy += subtotal; // Accumulate subtotal to calculate total sales
            salesReport.append(productName).append("\n");
            salesReport.append("Price: Php ").append(productPrice).append("\n");
            salesReport.append("Quantity Sold: ").append(quantity).append("\n");
            salesReport.append("Subtotal: Php ").append(subtotal).append("\n\n");
        }
        salesReport.append("Total Sales: Php ").append(totalSalesCopy).append("\n");

        return salesReport;
    }

    // GEN-LAST:event_GenerateReportButtonActionPerformed
    private void AddStocksToProductTableButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_AddStocksToProductTableButtonActionPerformed
        // Prompt for login
        JTextField usernameField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JCheckBox showPasswordCheckbox = new JCheckBox("Show Password");

        // Add an action listener to the checkbox to toggle password visibility
        showPasswordCheckbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                passwordField.setEchoChar(showPasswordCheckbox.isSelected() ? '\u0000' : '*');
            }
        });

        Object[] message = {
            "Enter username:", usernameField,
            "Enter password:", passwordField,
            showPasswordCheckbox
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Login", JOptionPane.OK_CANCEL_OPTION);
        if (option != JOptionPane.OK_OPTION) {
            return; // Cancel button clicked
        }
        String username = usernameField.getText();
        char[] passwordChars = passwordField.getPassword();
        String password = new String(passwordChars);

        // Check if user is authorized (dummy check, replace with actual authorization
        // logic)
        if ("admin".equals(username) && "admin".equals(password)) {
            // Add stocks functionality
            // For example, update the ProductTable with new stock values
            DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
            int selectedRowIndex = ProductTable.getSelectedRow();
            if (selectedRowIndex != -1) {
                String stocks = JOptionPane.showInputDialog(this, "Enter the number of stocks to add:");
                if (stocks == null) {
                    return; // Cancel button clicked
                }
                int newStocks = Integer.parseInt(stocks);
                int currentStocks = Integer.parseInt(model.getValueAt(selectedRowIndex, 4).toString());
                int totalStocks = currentStocks + newStocks;
                int confirmOption = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to add " + newStocks + " stocks?", "Confirm Addition",
                        JOptionPane.YES_NO_OPTION);
                if (confirmOption == JOptionPane.YES_OPTION) {
                    model.setValueAt(totalStocks, selectedRowIndex, 4);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a product to add stocks.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password. You need admin rights to add stocks.");
        }
    }// GEN-LAST:event_AddStocksToProductTableButtonActionPerformed

    private void updateTotalLabel(double totalSales) {
        TotalLabel.setText("Total: Php " + String.format("%.2f", totalSales));
    }

    private void ConfirmOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Check if the cart is empty
        if (CartTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Your cart is empty. Please add items before confirming your order.");
            return;
        }

        // Calculate total amount to pay
        double totalAmount = calculateTotalAmount();

        // Generate receipt
        StringBuilder receipt = generateReceipt(totalAmount);

        // Ask user if they want to proceed with payment
        int choice = JOptionPane.showConfirmDialog(this, receipt.toString() + "Do you want to proceed with payment?",
                "Confirmation", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            // Confirmation for proceeding with payment
            int paymentChoice = JOptionPane.showConfirmDialog(this, "Are you sure you want to proceed with payment?",
                    "Confirm Payment", JOptionPane.YES_NO_OPTION);
            if (paymentChoice == JOptionPane.YES_OPTION) {
                // Proceed with payment logic here
                JOptionPane.showMessageDialog(this, "Payment processed successfully. Thank you for your purchase!");

                // Store sales data before clearing the cart
                storeSalesData();
                storeCartData();
                // Clear the cart after payment
                clearCart();
                // Update the total label
                updateTotalLabel(0.0); // Set total amount to 0 after clearing the cart
            }
        }
    }

    // Method to store sales data before clearing the cart
    private void storeSalesData() {
        DefaultTableModel cartModel = (DefaultTableModel) CartTable.getModel();
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            String productName = cartModel.getValueAt(i, 0).toString();
            double productPrice = Double.parseDouble(cartModel.getValueAt(i, 1).toString());
            int quantity = Integer.parseInt(cartModel.getValueAt(i, 2).toString());

            Map<String, Object> item = new HashMap<>();
            item.put("productName", productName);
            item.put("productPrice", productPrice);
            item.put("quantity", quantity);
            salesData.add(item);
        }
    }

    // Method to generate the receipt
    private StringBuilder generateReceipt(double totalAmount) {
        StringBuilder receipt = new StringBuilder();
        receipt.append("Receipt\n\n");

        // Product details
        receipt.append("Products:\n");
        DefaultTableModel cartModel = (DefaultTableModel) CartTable.getModel();
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            String productName = cartModel.getValueAt(i, 0).toString();
            double productPrice = Double.parseDouble(cartModel.getValueAt(i, 1).toString());
            int quantity = Integer.parseInt(cartModel.getValueAt(i, 2).toString());
            receipt.append(productName).append("\n");
            receipt.append("Price: ").append(productPrice).append("\n");
            receipt.append("Quantity: ").append(quantity).append("\n\n");
        }

        // Total amount
        receipt.append("Total amount to pay: ").append(totalAmount).append("\n\n");

        return receipt;
    }

    private void AddNewProductToProductTableButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_AddNewProductToProductTableButtonActionPerformed
        // Prompt for login
        JTextField usernameField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JCheckBox showPasswordCheckbox = new JCheckBox("Show Password");

        // Add an action listener to the checkbox to toggle password visibility
        showPasswordCheckbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                passwordField.setEchoChar(showPasswordCheckbox.isSelected() ? '\u0000' : '*');
            }
        });

        Object[] message = {
            "Enter username:", usernameField,
            "Enter password:", passwordField,
            showPasswordCheckbox
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Login", JOptionPane.OK_CANCEL_OPTION);
        if (option != JOptionPane.OK_OPTION) {
            return; // Cancel button clicked
        }
        String username = usernameField.getText();
        char[] passwordChars = passwordField.getPassword();
        String password = new String(passwordChars);

        // Check if user is authorized (dummy check, replace with actual authorization logic)
        if ("admin".equals(username) && "admin".equals(password)) {
            // Proceed with adding a new product
            // Determine the next product ID
            int rowCount = ProductTable.getRowCount();
            int nextId = rowCount + 1;
            String productId = String.format("2024-%03d", nextId);

            // Prompt for product details
            String productName = JOptionPane.showInputDialog(this, "Enter Product Name:");
            if (productName == null) {
                return; // Cancel button clicked
            }
            String[] categories = {"Drink", "Food", "Misc.", "Others"};
            String productCategory = (String) JOptionPane.showInputDialog(this, "Select Product Category:", "Category",
                    JOptionPane.QUESTION_MESSAGE, null, categories, categories[0]);
            if (productCategory == null) {
                return; // Cancel button clicked
            }
            String unitPriceStr = JOptionPane.showInputDialog(this, "Enter Unit Price:");
            if (unitPriceStr == null) {
                return; // Cancel button clicked
            }
            String stocksStr = JOptionPane.showInputDialog(this, "Enter Stocks:");
            if (stocksStr == null) {
                return; // Cancel button clicked
            }
            // Validate input
            try {
                // Parse unit price and stocks
                double unitPrice = Double.parseDouble(unitPriceStr);
                int stocks = Integer.parseInt(stocksStr);

                // Add new row to ProductTable
                DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
                model.addRow(new Object[]{productId, productName, productCategory, unitPrice, stocks});
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input. Please enter valid numbers for Unit Price and Stocks.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password. You need admin rights to add a new product.");
        }
    }// GEN-LAST:event_AddNewProductToProductTableButtonActionPerformed

    private double calculateTotalAmount() {
        double totalAmount = 0.0;
        DefaultTableModel cartModel = (DefaultTableModel) CartTable.getModel();
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            double productPrice = Double.parseDouble(cartModel.getValueAt(i, 1).toString());
            int quantity = Integer.parseInt(cartModel.getValueAt(i, 2).toString());
            totalAmount += productPrice * quantity;
        }
        return totalAmount;
    }

    private void clearCart() {
        DefaultTableModel cartModel = (DefaultTableModel) CartTable.getModel();
        cartModel.setRowCount(0); // Clear the table
    }

    private void storeCartData() {
        cartData.clear(); // Clear the previous cart data
        DefaultTableModel cartModel = (DefaultTableModel) CartTable.getModel();
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            String productName = cartModel.getValueAt(i, 0).toString();
            double productPrice = Double.parseDouble(cartModel.getValueAt(i, 1).toString());
            int quantity = Integer.parseInt(cartModel.getValueAt(i, 2).toString());

            Map<String, Object> item = new HashMap<>();
            item.put("productName", productName);
            item.put("productPrice", productPrice);
            item.put("quantity", quantity);
            cartData.add(item);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(productSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(productSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(productSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(productSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new productSaleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewProductToProductTableButton;
    private javax.swing.JButton AddStocksToProductTableButton;
    private javax.swing.JButton AddToCartButton;
    private javax.swing.JLabel AvailableProductLabel;
    private javax.swing.JLabel AvailableProductLabel1;
    private javax.swing.JLabel CartLabel;
    private javax.swing.JTable CartTable;
    private javax.swing.JButton ConfirmOrderButton;
    private javax.swing.JButton GenerateReportButton;
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton RemoveProductFromCartButton;
    private javax.swing.JButton RemoveProductInProductTable;
    private javax.swing.JButton SubtractStocksFromProductTable;
    private javax.swing.JLabel TotalLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
